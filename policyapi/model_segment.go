/*
 * NSX Policy API
 *
 * VMware NSX Policy REST API
 *
 * API version: 4.2.0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package nsxt

// Segment configuration to attach workloads. 
type Segment struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
	Revision int32 `json:"_revision,omitempty"`
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity. 
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Path of its parent
	ParentPath string `json:"parent_path,omitempty"`
	// This is a UUID generated by the system for realizing the entity object. In most cases this should be same as 'unique_id' of the entity. However, in some cases this can be different because of entities have migrated their unique identifier to NSX Policy intent objects later in the timeline and did not use unique_id for realization. Realization id is helpful for users to debug data path to correlate the configuration with corresponding intent. 
	RealizationId string `json:"realization_id,omitempty"`
	// Absolute path of this object
	Path string `json:"path,omitempty"`
	// This is a UUID generated by the system for knowing which site owns an object. This is used in NSX+. 
	OriginSiteId string `json:"origin_site_id,omitempty"`
	// Path relative from its parent
	RelativePath string `json:"relative_path,omitempty"`
	// This is a UUID generated by the system for knowing who owns this object. This is used in NSX+. 
	OwnerId string `json:"owner_id,omitempty"`
	// This is a UUID generated by the GM/LM to uniquely identify entities in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites. 
	UniqueId string `json:"unique_id,omitempty"`
	// This is the path of the object on the local managers when queried on the NSX+ service, and path of the object on NSX+ service when queried from the local managers. 
	RemotePath string `json:"remote_path,omitempty"`
	// Subtree for this type within policy tree containing nested elements. Note that  this type is applicable to be used in Hierarchical API only. 
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties. 
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects. 
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Subnet configuration. Max 1 subnet
	Subnets []SegmentSubnet `json:"subnets,omitempty"`
	// Policy path to the connecting Tier-0 or Tier-1 or label of type Tier0. Valid only for segments created under Infra. This field can only be used for overlay segments. VLAN backed segments cannot have connectivity path set. 
	ConnectivityPath string `json:"connectivity_path,omitempty"`
	// This property could be used for vendor specific configuration in key value string pairs, the setting in extra_configs will be automatically inheritted by segment ports in the Segment. 
	ExtraConfigs []SegmentExtraConfig `json:"extra_configs,omitempty"`
	AdvancedConfig *SegmentAdvancedConfig `json:"advanced_config,omitempty"`
	// Static address binding used for the Segment. This field is deprecated and will be removed in a future release. Please use address_bindings in SegmentPort to configure static bindings.
	AddressBindings []PortAddressBindingEntry `json:"address_bindings,omitempty"`
	FederationConfig *FederationConnectivityConfig `json:"federation_config,omitempty"`
	// Policy path to the EvpnTenantConfig resource. Supported only for Route-Server Evpn Mode. Supported only for Overlay Segments. This will be populated for both Parent and Child segments participating in Evpn Route-Server Mode. 
	EvpnTenantConfigPath string `json:"evpn_tenant_config_path,omitempty"`
	// Mac pool id that associated with a Segment.
	MacPoolId string `json:"mac_pool_id,omitempty"`
	// Multiple distinct L2 bridge profiles can be configured.
	BridgeProfiles []BridgeProfileConfig `json:"bridge_profiles,omitempty"`
	// VLAN ids for a VLAN backed Segment. Can be a VLAN id or a range of VLAN ids specified with '-' in between. 
	VlanIds []string `json:"vlan_ids,omitempty"`
	// DNS domain name
	DomainName string `json:"domain_name,omitempty"`
	// Used for overlay connectivity of segments. The overlay_id should be allocated from the pool as definied by enforcement-point. If not provided, it is auto-allocated from the default pool on the enforcement-point. 
	OverlayId int32 `json:"overlay_id,omitempty"`
	// Policy path to DHCP server or relay configuration to use for all IPv4 & IPv6 subnets configured on this segment. 
	DhcpConfigPath string `json:"dhcp_config_path,omitempty"`
	// This property is deprecated. The property will continue to work as expected for existing segments. The segments that are newly created with ls_id will be ignored. Sepcify pre-creted logical switch id for Segment. 
	LsId string `json:"ls_id,omitempty"`
	// Flag to indicate if the Segment is a Child-Segment of type EVPN.
	EvpnSegment bool `json:"evpn_segment,omitempty"`
	// Admin state represents desired state of segment. It does not reflect the state of other logical entities connected/attached to the segment.
	AdminState string `json:"admin_state,omitempty"`
	// Policy path to metadata proxy configuration. Multiple distinct MD proxies can be configured.
	MetadataProxyPaths []string `json:"metadata_proxy_paths,omitempty"`
	// Segment type based on configuration. 
	Type_ string `json:"type,omitempty"`
	L2Extension *L2Extension `json:"l2_extension,omitempty"`
	// Policy path to the transport zone. Supported for VLAN backed segments as well as Overlay Segments. - This field is required for VLAN backed Segments. - For overlay Segments, it is auto assigned if only one transport zone   exists in the enforcement point. Default transport zone is auto   assigned for  overlay segments if none specified. 
	TransportZonePath string `json:"transport_zone_path,omitempty"`
	// If this field is not set for overlay segment, then the default of MTEP will be used. 
	ReplicationMode string `json:"replication_mode,omitempty"`
}
